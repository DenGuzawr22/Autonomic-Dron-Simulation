module herdexperiment:ff_linpro_cluster
import protelis:lang:utils
import protelis:coord:spreading
import protelis:coord:accumulation
import it.unibo.experiment.herdexperiment.MyUtils.getClusterSolver
import it.unibo.experiment.ProtelisUtils.getCenterOfFovAtDistance
import it.unibo.experiment.ProtelisUtils.closestPositionToTargetAtDistance
import utils
import exploration_strategies

public def myFollowOrExplore(target, explorationStrategy) {
  if(target == noTarget()) {
      explorationStrategy.apply()
      noTarget()
  } else {
      env.put("TEST", target)
      myfollow(target)
  }
}

public def myfollow(target) {
    envRemove("doSpin")
    envRemove("doZigZag")
    env.put("destination", closestPositionToTargetAtDistance(target, getFoVCenterDistance()));
    env.put("heading", target);
    target
}

rep(solver <- getClusterSolver()) {
    let localTargets = getLocalTargets()
    let targets = unionHood PlusSelf(nbr(localTargets))
    let cameras = nbr(getCenterOfFov())
    let myTarget = solver.solve(cameras, targets, getMaxCamerasPerTarget(), false).getOrDefault(getUID(), noTarget())
    myFollowOrExplore(myTarget, fieldExploration)
    avoidCameraCollision(myTarget, localTargets)
    solver
}

